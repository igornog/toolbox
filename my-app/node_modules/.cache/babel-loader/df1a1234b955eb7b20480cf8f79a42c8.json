{"ast":null,"code":"var _jsxFileName = \"/Users/nmath3u5/Documents/b2b/sami/hiring-toolbox-web/my-app/src/components/LoginBtn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useGoogleLogin } from \"react-google-login\";\nimport LogoutBtn from \"../components/LogoutBtn\";\nimport USERS_LIST from \"../constants/userList\";\nimport \"./LogBtn.scss\"; // refresh token\n\nimport { refreshTokenSetup } from \"../utils/refreshToken\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst clientId = \"318274943652-5svcg57nbr403ica2mq8pv2lqo883ep7.apps.googleusercontent.com\";\n\nfunction LoginHooks(params) {\n  _s();\n\n  const [loginFailed, setLoginFailed] = useState(false);\n\n  const onSuccess = res => {\n    if (USERS_LIST.includes(res.profileObj.email)) {\n      console.log(\"Login Success: currentUser:\", res.profileObj);\n      params.setLog(true);\n    } else {\n      setLoginFailed(true);\n    }\n\n    refreshTokenSetup(res);\n  };\n\n  const onFailure = res => {\n    setLoginFailed(true);\n    console.log(\"Login failed: res:\", res);\n  };\n\n  const {\n    signIn\n  } = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId,\n    isSignedIn: true,\n    accessType: \"offline\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!params.logged ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signIn,\n      className: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"icons/google.svg\",\n        alt: \"google login\",\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"buttonText\",\n        children: \"Sign in with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LogoutBtn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), loginFailed ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"login-failed-txt\",\n      children: \"N\\xE3o foi poss\\xEDvel fazer login com esta conta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : \"\"]\n  }, void 0, true);\n}\n\n_s(LoginHooks, \"17Zic7UZoCLhAKNyIX6muemV2AA=\", false, function () {\n  return [useGoogleLogin];\n});\n\n_c = LoginHooks;\nexport default LoginHooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginHooks\");","map":{"version":3,"sources":["/Users/nmath3u5/Documents/b2b/sami/hiring-toolbox-web/my-app/src/components/LoginBtn.js"],"names":["React","useState","useGoogleLogin","LogoutBtn","USERS_LIST","refreshTokenSetup","clientId","LoginHooks","params","loginFailed","setLoginFailed","onSuccess","res","includes","profileObj","email","console","log","setLog","onFailure","signIn","isSignedIn","accessType","logged"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,eAAP,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,uBAAlC;;;AAEA,MAAMC,QAAQ,GACZ,0EADF;;AAGA,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMU,SAAS,GAAIC,GAAD,IAAS;AACzB,QAAIR,UAAU,CAACS,QAAX,CAAoBD,GAAG,CAACE,UAAJ,CAAeC,KAAnC,CAAJ,EAA+C;AAC7CC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CL,GAAG,CAACE,UAA/C;AACAN,MAAAA,MAAM,CAACU,MAAP,CAAc,IAAd;AACD,KAHD,MAGO;AACLR,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AACDL,IAAAA,iBAAiB,CAACO,GAAD,CAAjB;AACD,GARD;;AAUA,QAAMO,SAAS,GAAIP,GAAD,IAAS;AACzBF,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCL,GAAlC;AACD,GAHD;;AAKA,QAAM;AAAEQ,IAAAA;AAAF,MAAalB,cAAc,CAAC;AAChCS,IAAAA,SADgC;AAEhCQ,IAAAA,SAFgC;AAGhCb,IAAAA,QAHgC;AAIhCe,IAAAA,UAAU,EAAE,IAJoB;AAKhCC,IAAAA,UAAU,EAAE;AALoB,GAAD,CAAjC;AAQA,sBACE;AAAA,eACG,CAACd,MAAM,CAACe,MAAR,gBACC;AAAQ,MAAA,OAAO,EAAEH,MAAjB;AAAyB,MAAA,SAAS,EAAC,QAAnC;AAAA,8BACE;AAAK,QAAA,GAAG,EAAC,kBAAT;AAA4B,QAAA,GAAG,EAAC,cAAhC;AAA+C,QAAA,SAAS,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAMC,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAPJ,EASGX,WAAW,gBACV;AAAG,MAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,GAKV,EAdJ;AAAA,kBADF;AAmBD;;GA7CQF,U;UAkBYL,c;;;KAlBZK,U;AA+CT,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useGoogleLogin } from \"react-google-login\";\nimport LogoutBtn from \"../components/LogoutBtn\";\nimport USERS_LIST from \"../constants/userList\";\n\nimport \"./LogBtn.scss\";\n\n// refresh token\nimport { refreshTokenSetup } from \"../utils/refreshToken\";\n\nconst clientId =\n  \"318274943652-5svcg57nbr403ica2mq8pv2lqo883ep7.apps.googleusercontent.com\";\n\nfunction LoginHooks(params) {\n  const [loginFailed, setLoginFailed] = useState(false);\n\n  const onSuccess = (res) => {\n    if (USERS_LIST.includes(res.profileObj.email)) {\n      console.log(\"Login Success: currentUser:\", res.profileObj);\n      params.setLog(true);\n    } else {\n      setLoginFailed(true);\n    }\n    refreshTokenSetup(res);\n  };\n\n  const onFailure = (res) => {\n    setLoginFailed(true);\n    console.log(\"Login failed: res:\", res);\n  };\n\n  const { signIn } = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId,\n    isSignedIn: true,\n    accessType: \"offline\",\n  });\n\n  return (\n    <>\n      {!params.logged ? (\n        <button onClick={signIn} className=\"button\">\n          <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\n          <span className=\"buttonText\">Sign in with Google</span>\n        </button>\n      ) : (\n        <LogoutBtn />\n      )}\n      {loginFailed ? (\n        <p className=\"login-failed-txt\">\n          Não foi possível fazer login com esta conta\n        </p>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n\nexport default LoginHooks;\n"]},"metadata":{},"sourceType":"module"}